.d-flex.justify-content-between.align-items-center.mb-4
  %h2 Backup Configurations
  = link_to 'New Backup Configuration', new_backup_path, class: 'btn btn-primary'

.row
  .col-12
    - if @backups.any?
      %table.table.table-striped.table-hover
        %thead
          %tr
            %th Name
            %th Database
            %th Schedule
            %th Status
            %th Last Backup
            %th Enabled
            %th Actions
        %tbody
          - @backups.each do |backup|
            %tr{"data-controller" => "backup"}
              %td= backup.name
              %td= backup.database
              %td= backup.cron_schedule
              %td
                %span.badge{"class" => "bg-#{backup_status_color(backup.status)}", "data-backup-target" => "status"}
                  = backup.status || 'N/A'
              %td= backup.backup_date ? l(backup.backup_date, format: :short) : 'Never'
              %td
                %span.badge{class: backup.enabled? ? 'bg-success' : 'bg-secondary'}
                  = backup.enabled? ? 'Yes' : 'No'
              %td
                .btn-group
                  = link_to 'Run Now', run_backup_path(backup), class: 'btn btn-sm btn-outline-primary', data: { action: 'click->backup#run' }
                  = link_to 'Edit', edit_backup_path(backup), class: 'btn btn-sm btn-outline-secondary'
                  = link_to 'Delete', backup_path(backup), method: :delete, class: 'btn btn-sm btn-outline-danger', data: { confirm: 'Are you sure?' }
                - if backup.log.present?
                  %div
                    = link_to 'View Log', '#', class: 'btn btn-sm btn-outline-info mt-1', data: { action: 'click->backup#toggleLog' }
                    %pre.d-none{"data-backup-target" => "log"}= backup.log
    - else
      .alert.alert-info
        No backup configurations found. 
        = link_to 'Create your first one', new_backup_path

- if @recent_backups.any?
  %h3.solid-backup-recent Recent Backups
  .table-responsive
    %table.table.table-sm
      %thead
        %tr
          %th Name
          %th Database
          %th Date
          %th Status
          %th File Size
      %tbody
        - @recent_backups.each do |backup|
          %tr
            %td= backup.name
            %td= backup.database
            %td= l(backup.backup_date, format: :short) if backup.backup_date
            %td
              %span.badge{"class" => "bg-#{backup_status_color(backup.status)}"}
                = backup.status
            %td= number_to_human_size(File.size(backup.file_path)) if backup.file_path && File.exist?(backup.file_path)